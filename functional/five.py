# 切片

""" 
取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：
>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
取前3个元素，应该怎么做？
笨办法：
>>> [L[0], L[1], L[2]]
['Michael', 'Sarah', 'Tracy']

之所以是笨办法是因为扩展一下，取前N个元素就没辙了。

取前N个元素，也就是索引为0-(N-1)的元素，可以用循环：
>>> r = []
>>> n = 3
>>> for i in range(n):
...     r.append(L[i])
... 
>>> r
['Michael', 'Sarah', 'Tracy']
"""

L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']

# 取前3个元素 L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。
L[0:3] # ['Michael', 'Sarah', 'Tracy']

# 如果第一个索引是0，还可以省略：
L[:3]

# 既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：
L[-2:] # ['Bob', 'Jack']

# 记住倒数第一个元素的索引是-1

R = list(range(100))

R[:10]
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

R[-10:]

# 前10个数，每两个取一个：
R[:10:2] # [0, 2, 4, 6, 8]

# 所有数，每5个取一个：
R[::5]

# [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]

# 甚至什么都不写，只写[:]就可以原样复制一个list：
R[:] # [0, 1, 2, 3, ..., 99]